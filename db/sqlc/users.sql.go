// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSessions = `-- name: CreateSessions :one
INSERT INTO sessions(
    id,
    public_address,
    refresh_token,
    user_agent,
    client_ip,
    is_blocked,
    expires_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, public_address, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at
`

type CreateSessionsParams struct {
	ID            uuid.UUID `json:"id"`
	PublicAddress string    `json:"public_address"`
	RefreshToken  string    `json:"refresh_token"`
	UserAgent     string    `json:"user_agent"`
	ClientIp      string    `json:"client_ip"`
	IsBlocked     bool      `json:"is_blocked"`
	ExpiresAt     time.Time `json:"expires_at"`
}

func (q *Queries) CreateSessions(ctx context.Context, arg CreateSessionsParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSessions,
		arg.ID,
		arg.PublicAddress,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.PublicAddress,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (public_address, nonce)
VALUES ($1, $2)
RETURNING id, public_address, nonce, created_at, last_login
`

type CreateUserParams struct {
	PublicAddress string `json:"public_address"`
	Nonce         string `json:"nonce"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.PublicAddress, arg.Nonce)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicAddress,
		&i.Nonce,
		&i.CreatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, public_address, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at FROM sessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.PublicAddress,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserBypublic_address = `-- name: GetUserBypublic_address :one
SELECT id, public_address, nonce, created_at, last_login FROM users
WHERE public_address = $1
`

func (q *Queries) GetUserBypublic_address(ctx context.Context, publicAddress string) (User, error) {
	row := q.db.QueryRow(ctx, getUserBypublic_address, publicAddress)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicAddress,
		&i.Nonce,
		&i.CreatedAt,
		&i.LastLogin,
	)
	return i, err
}

const updateLastLogin = `-- name: UpdateLastLogin :one
UPDATE users 
SET last_login = CURRENT_TIMESTAMP 
WHERE id = $1 
RETURNING id, public_address, nonce, created_at, last_login
`

func (q *Queries) UpdateLastLogin(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, updateLastLogin, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicAddress,
		&i.Nonce,
		&i.CreatedAt,
		&i.LastLogin,
	)
	return i, err
}

const updateUserNonce = `-- name: UpdateUserNonce :one
UPDATE users
SET nonce = $2
WHERE public_address = $1
RETURNING id, public_address, nonce, created_at, last_login
`

type UpdateUserNonceParams struct {
	PublicAddress string `json:"public_address"`
	Nonce         string `json:"nonce"`
}

func (q *Queries) UpdateUserNonce(ctx context.Context, arg UpdateUserNonceParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserNonce, arg.PublicAddress, arg.Nonce)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicAddress,
		&i.Nonce,
		&i.CreatedAt,
		&i.LastLogin,
	)
	return i, err
}

const userExists = `-- name: UserExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE public_address = $1)
`

func (q *Queries) UserExists(ctx context.Context, publicAddress string) (bool, error) {
	row := q.db.QueryRow(ctx, userExists, publicAddress)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
